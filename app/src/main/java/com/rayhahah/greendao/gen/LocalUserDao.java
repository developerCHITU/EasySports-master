package com.rayhahah.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rayhahah.easysports.bean.db.LocalUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_USER".
*/
public class LocalUserDao extends AbstractDao<LocalUser, Void> {

    public static final String TABLENAME = "LOCAL_USER";

    /**
     * Properties of entity LocalUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Essysport_id = new Property(0, String.class, "essysport_id", false, "ESSYSPORT_ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Screen_name = new Property(3, String.class, "screen_name", false, "SCREEN_NAME");
        public final static Property Tel = new Property(4, String.class, "tel", false, "TEL");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Question = new Property(6, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(7, String.class, "answer", false, "ANSWER");
        public final static Property Cover = new Property(8, String.class, "cover", false, "COVER");
        public final static Property Hupu_user_name = new Property(9, String.class, "hupu_user_name", false, "HUPU_USER_NAME");
        public final static Property Hupu_password = new Property(10, String.class, "hupu_password", false, "HUPU_PASSWORD");
        public final static Property Is_day_theme = new Property(11, String.class, "is_day_theme", false, "IS_DAY_THEME");
    }


    public LocalUserDao(DaoConfig config) {
        super(config);
    }
    
    public LocalUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_USER\" (" + //
                "\"ESSYSPORT_ID\" TEXT UNIQUE ," + // 0: essysport_id
                "\"USER_NAME\" TEXT UNIQUE ," + // 1: user_name
                "\"PASSWORD\" TEXT NOT NULL ," + // 2: password
                "\"SCREEN_NAME\" TEXT NOT NULL ," + // 3: screen_name
                "\"TEL\" TEXT," + // 4: tel
                "\"EMAIL\" TEXT," + // 5: email
                "\"QUESTION\" TEXT," + // 6: question
                "\"ANSWER\" TEXT," + // 7: answer
                "\"COVER\" TEXT," + // 8: cover
                "\"HUPU_USER_NAME\" TEXT," + // 9: hupu_user_name
                "\"HUPU_PASSWORD\" TEXT," + // 10: hupu_password
                "\"IS_DAY_THEME\" TEXT);"); // 11: is_day_theme
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalUser entity) {
        stmt.clearBindings();
 
        String essysport_id = entity.getEssysport_id();
        if (essysport_id != null) {
            stmt.bindString(1, essysport_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getScreen_name());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(7, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(8, answer);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(9, cover);
        }
 
        String hupu_user_name = entity.getHupu_user_name();
        if (hupu_user_name != null) {
            stmt.bindString(10, hupu_user_name);
        }
 
        String hupu_password = entity.getHupu_password();
        if (hupu_password != null) {
            stmt.bindString(11, hupu_password);
        }
 
        String is_day_theme = entity.getIs_day_theme();
        if (is_day_theme != null) {
            stmt.bindString(12, is_day_theme);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalUser entity) {
        stmt.clearBindings();
 
        String essysport_id = entity.getEssysport_id();
        if (essysport_id != null) {
            stmt.bindString(1, essysport_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
        stmt.bindString(3, entity.getPassword());
        stmt.bindString(4, entity.getScreen_name());
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(5, tel);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(7, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(8, answer);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(9, cover);
        }
 
        String hupu_user_name = entity.getHupu_user_name();
        if (hupu_user_name != null) {
            stmt.bindString(10, hupu_user_name);
        }
 
        String hupu_password = entity.getHupu_password();
        if (hupu_password != null) {
            stmt.bindString(11, hupu_password);
        }
 
        String is_day_theme = entity.getIs_day_theme();
        if (is_day_theme != null) {
            stmt.bindString(12, is_day_theme);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocalUser readEntity(Cursor cursor, int offset) {
        LocalUser entity = new LocalUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // essysport_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.getString(offset + 2), // password
            cursor.getString(offset + 3), // screen_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // question
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // answer
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cover
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // hupu_user_name
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // hupu_password
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // is_day_theme
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalUser entity, int offset) {
        entity.setEssysport_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.getString(offset + 2));
        entity.setScreen_name(cursor.getString(offset + 3));
        entity.setTel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuestion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAnswer(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCover(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHupu_user_name(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setHupu_password(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIs_day_theme(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocalUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocalUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocalUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
